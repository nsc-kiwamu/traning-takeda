import { dice, gambler, card} from "./Common12.js";
/*
 アルゴリズム

  <実施内容>
  1. サンプルを参考に以下の条件を満たすように呼び出しをすること。 .OK
  　対戦者:2名
  　勝負方法:サイコロを1回振って大きな数値の出た方の勝ち
  　勝負結果:「～さんの負けです」か「引き分けです」を出力する
*/
 // 対戦者の作成
 const users:gambler[] = [{name:'白井', coin:0, matchValue:[0]}, {name:'遠藤', coin:0, matchValue:[0]}]
 // サイコロを振って結果を格納する
 for (let user of users) {
     // サイコロを振る
     const value = dice()
     console.log(`${user.name}さんがサイコロを振った結果は${value}です`)
     // 結果を格納する
     user.matchValue = [value]
 }
 // サイコロを振って結果で勝負する
 if (users[0].matchValue > users[1].matchValue) {
     console.log(`${users[0].name}さんの勝ちです`)
 } else if (users[0].matchValue < users[1].matchValue) {
     console.log(`${users[1].name}さんの勝ちです`)
 } else {
     console.log('引き分けです')
 }


/*
  2. サンプルを参考に以下の条件を満たすように呼び出しをすること。 .OK
  　対戦者:2名
  　勝負方法:サイコロを2回振って合計が大きな数値の出た方の勝ち
  　勝負結果:「～さんの勝ちです」か「引き分けです」を出力する
*/


/*
  3. サンプルを参考に以下の条件を満たすように呼び出しをすること。.OK
  　対戦者:2名
  　勝負方法:サイコロを3回振って1回目～3回目をそれぞれ比較し、大きな数値を多く出した方の勝ち
  　　例)Aさんのサイコロの結果 1回目:2 2回目:2 3回目6
  　　   Bさんのサイコロの結果 1回目:3 2回目:4 3回目1
　　　　　※この場合、Aさんの勝利
  　勝負結果:「～さんの勝ちです」か「引き分けです」を出力する
*/

/*
  4. サンプルを参考に以下の条件を満たすように呼び出しをすること。
  　対戦者:4名
  　勝負方法:サイコロを1回振って大きな数値の出た人の勝ち
  　勝負結果:「～さんの勝ちです」か「引き分けです」を出力する
  　　例)Aさん:1、Bさん:1、Cさん:5、Dさん5 →　「Cさんの勝ちです」「Dさんの勝ちです」と出すか「CさんとDさんの勝ちです」と出す
  　　　　全員が同じ値になった場合のみ「引き分けです」を出す
*/

/*
  5. サンプルを参考に以下の条件を満たすように呼び出しをすること。.OK
  　対戦者:2名
  　勝負方法:カードを1枚めくり大きな数値の出た人の勝ち
  　勝負結果:「～さんの勝ちです」か「引き分けです」を出力する
  　※関数diceを参考に1-13の値をランダムで返却する関数cardを作成し、使用すること
*/

/*※1 「Ctrl + @」でターミナルを開き以下を実行
  yarn tsc 
  node dist/traning12/Practice12.js
 */